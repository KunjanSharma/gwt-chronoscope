#summary Using chronoscope in Gwt applications

<wiki:toc max_depth="3" />

= Chronoscope GWT API =

== Introduction ==

Chronoscope is a fast, scalable, charting toolkit designed to work well in most web browsers and developed using Gwt. 
It is packaged in a library ready to use in any Gwt application. This document describes how to setup your application and start using Chronoscope.

== Creating a new project ==

 * Assuming you have [http://code.google.com/webtoolkit Google Web Toolkit] installed
already.  If not, [http://code.google.com/webtoolkit/gettingstarted.html get started]

 * Create a new project using the `webAppCreator` command line tool:

{{{webAppCreator -out HelloChart com.example.client.HelloChart}}}

 * Edit `src/com/example/HelloChart.gwt.xml` and add a line to inherit `Chronoscope`. 
{{{
<module>
    <inherits name='org.timepedia.chronoscope.Chronoscope' />
    <entry-point class='com.example.client.HelloChart' />;
</module>
}}}

 * You'll also need to add chronoscope and gwtexporter to your project classpath. So simply put these libraries in the folder:
{{{
  cp path_to/gwtexporter.jar path_to/chronoacope.jar war/WEB-INF/lib
}}}

== Create a dataset file == 
 * We'll use a json file for the dataset, so put it in your `war/` foder and make sure it should be in the format: 
{{{
  data set = {
    id: "unrate",                                         // Unique id for this dataset
    domainscale: 1000,                                    // Scale
    domain: [-694306739,-691628339,-689122739,-686444339] // UTC time in milliseconds
    range:  [3.4, 3.8, 4.0, 3.9,],                        // Values
    label:  "Unemployment",                               // Dataset label
    axis:   "percent"                                     // Chart unit
  }
}}}

 * Datasets with the same `axis:` identifier will share the same range axis, which is useful if they're units like `hours`, `km`, `kbps`, `$`, etc.

 * Modify the index.html `webAppCreator` made and add a tag to load the data:
{{{
  <script language='javascript' src='dataset.js'></script>
}}}

== Use chronoscope in your javacode == 
 * Modify your javacode `HelloChart.java`:
{{{
public class DevTest implements EntryPoint {
  public void onModuleLoad() {
      double GOLDEN_RATIO = 1.618;
      int chartWidth = 600, chartHeight = (int) ( chartWidth / GOLDEN_RATIO );
      Chronoscope.setFontBookRendering(true);
      Chronoscope.initialize();
      Chronoscope chronoscope = Chronoscope.getInstance();

      Dataset[] dataset = new Dataset[1];
      dataset[0] = chronoscope.createDataset(getJson("dataset"));
      VerticalPanel vp=new VerticalPanel();
      vp.add(new Label(dataset[0].getRangeLabel()));
      ChartPanel chartPanel = Chronoscope.createTimeseriesChart(dataset, chartWidth, chartHeight);
      vp.add(chartPanel);
      RootPanel.get().add(vp);
  }

  private static native JsonDatasetJSO getJson(String varName) /*-{
     return $wnd[varName];
  }-*/;

}
}}}

 * Old versions of Chronoscope had a different API
{{{
public class HelloChart implements EntryPoint {

    public void onModuleLoad() {
        double GOLDEN_RATIO = 1.618;
        int chartWidth = 600, chartHeight = (int) ( chartWidth / GOLDEN_RATIO );
        Chronoscope.setFontBookRendering(true);

        XYDataset[] dataset = new XYDataset[1];
        dataset[0] = Chronoscope.createXYDataset(getJson("dataset"));
        VerticalPanel vp=new VerticalPanel();
        vp.add(new Label(dataset[0].getRangeLabel()));
        ChartPanel chartPanel = Chronoscope.createTimeseriesChart(dataset, chartWidth, chartHeight);
        vp.add(chartPanel);
        RootPanel.get().add(vp);
    }

    private static native JavaScriptObject getJson(String varName) /*-{
       return $wnd[varName];
    }-*/;
}
}}}

== Exporting the Javascript API == 
Exporting the Javascript API from your GWT app is as simple as: 
{{{
  Chronoscope chronoscope = new Chronoscope();
  chronoscope.init();
}}}

== Gwt API Documentation ==

Read the [http://gwt-chronoscope.googlecode.com/svn/apidocs/index.html Javadoc].
